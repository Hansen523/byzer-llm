
如果你需要生成代码，对于每个需要更改的文件，写出类似于 unified diff 的更改，就像`diff -U0`会产生的那样。
下面是一些生成diff的要求：
Make sure you include the first 2 lines with the file paths.
Don't include timestamps with the file paths.

Start each hunk of changes with a `@@ ... @@` line.
Don't include line numbers like `diff -U0` does.
The user's patch tool doesn't need them.

The user's patch tool needs CORRECT patches that apply cleanly against the current contents of the file!
Think carefully and make sure you include and mark all lines that need to be removed or changed as `-` lines.
Make sure you mark all new or modified lines with `+`.
Don't leave out any lines or the diff patch won't apply correctly.

Indentation matters in the diffs!

Start a new hunk for each section of the file that needs changes.

Only output hunks that specify changes with `+` or `-` lines.
Skip any hunks that are entirely unchanging ` ` lines.

Output hunks in whatever order makes the most sense.
Hunks don't need to be in any particular order.

When editing a function, method, loop, etc use a hunk to replace the *entire* code block.
Delete the entire existing version with `-` lines and then add a new, updated version with `+` lines.
This will help you generate correct code and correct diffs.

To move code within a file, use 2 hunks: 1 to delete it from its current location, 1 to insert it in the new location.

To make a new file, show a diff from `--- /dev/null` to `+++ path/to/new/file.ext`.                

The path start with `---` or `+++` should be the absolute path of the file or relative path from the project root.

下面我们来看一个例子：

当前项目目录结构：
1. 项目根目录： /tmp/projects/mathweb
2. 项目子目录/文件列表(类似tree 命令输出)
flask/
    app.py
    templates/
        index.html
    static/
        style.css 

用户需求： 请将下面的代码中的is_prime()函数替换为sympy。
回答：
好的，我会先罗列出需要的修改步骤，然后再列出diff。
修改步骤：
1. 添加sympy的import 语句。
2. 删除is_prime()函数。
3. 将现有对is_prime()的调用替换为sympy.isprime()。
    
下面是这些变更的diff：

```diff
--- /tmp/projects/mathweb/flask/app.py
+++ /tmp/projects/mathweb/flask/app.py
@@ ... @@
-class MathWeb:
+import sympy
+
+class MathWeb:
@@ ... @@
-def is_prime(x):
-    if x < 2:
-        return False
-    for i in range(2, int(math.sqrt(x)) + 1):
-        if x % i == 0:
-            return False
-    return True
@@ ... @@
-@app.route('/prime/<int:n>')
-def nth_prime(n):
-    count = 0
-    num = 1
-    while count < n:
-        num += 1
-        if is_prime(num):
-            count += 1
-    return str(num)
+@app.route('/prime/<int:n>')
+def nth_prime(n):
+    count = 0
+    num = 1
+    while count < n:
+        num += 1
+        if sympy.isprime(num):
+            count += 1
+    return str(num)
```
         
现在让我们开始一个新的任务:        

当前项目目录结构：
1. 项目根目录： /Users/allwefantasy/projects/byzer-llm
2. 项目子目录/文件列表(类似tree 命令输出)：        


下面是用户的需求：

参考 byzerllm.utils.client.entrypoints.openai.api_server， 
在 byzerllm.py 文件添加一个新的命令行：

```shell
byzerllm serve 
```

该命令能接受的参数可以参考 api_server.py 中需要的参数。
对代码进行适当的优化和抽象。
                